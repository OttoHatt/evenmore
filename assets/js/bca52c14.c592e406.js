"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[247],{43003:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new [EffectValue].","params":[{"name":"baseValue","desc":"The final value when no multipliers are applied","lua_type":"number"}],"returns":[{"desc":"","lua_type":"EffectValue"}],"function_type":"static","source":{"line":28,"path":"src/effectvalue/Shared/EffectValue.lua"}},{"name":"Observe","desc":"Observe the final value, after all multipliers have been compounded.","params":[],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"method","source":{"line":88,"path":"src/effectvalue/Shared/EffectValue.lua"}},{"name":"SetBaseValue","desc":"Set the base value of the effect.\\nNote that this will automatically update the final value, and notify any observers.","params":[{"name":"baseValue","desc":"The final value when no multipliers are applied.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":98,"path":"src/effectvalue/Shared/EffectValue.lua"}},{"name":"PushMultiplier","desc":"Push a multiplier (i.e. \'effect\') onto the base value.\\n\\nAll multipliers are multiplied together before being applied. This means they compound.\\n```\\ni.e. with multipliers (1, 1, 1) => baseValue * 1.\\ni.e. with multipliers (1, 1.5, 0.3) => baseValue * 0.15.\\n```","params":[{"name":"multiplier","desc":"","lua_type":"number"}],"returns":[{"desc":"Call to remove","lua_type":"callback"}],"function_type":"method","source":{"line":116,"path":"src/effectvalue/Shared/EffectValue.lua"}}],"properties":[],"types":[],"name":"EffectValue","desc":"Given a base number value, apply compounding multipliers on top.\\nUseful for levelling-up, simulators, etc.\\n\\nFor more advanced functionlaity, see Quenty\'s [RogueProperty].","source":{"line":9,"path":"src/effectvalue/Shared/EffectValue.lua"}}')}}]);